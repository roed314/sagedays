#!/usr/bin/env python

import os, sys, shutil, getpass, subprocess, random, time, argparse
opj = os.path.join
ope = os.path.exists
def find_project(path):
    dirs = []
    base, newdir = os.path.split(path)
    while newdir:
        dirs.insert(0,newdir)
        base, newdir = os.path.split(base)
    if len(dirs) < 2 or dirs[0] != 'projects':
        print "You must run setup_user inside a project!"
        sys.exit(1)
    return opj('/projects',dirs[1])
CUR_DIR = os.getcwd()
MAIN = find_project(CUR_DIR)
TEMPLATE = opj(MAIN, "user", "template")
with open(opj(MAIN,'.sd.num')) as F:
    SDNUM = F.read()

def create_homedir(username):
    HOME = opj(MAIN, "user", username)
    if ope(HOME):
        print "\nYour home directory %s already exists.\n"%HOME
    else:
        print "\nCreating home directory %s.\n"%HOME
        shutil.copytree(TEMPLATE, HOME)
    os.environ['HOME'] = HOME
    os.environ['USER'] = username
    return HOME

def configure_git():
    name = raw_input("Your name (for git commits): ")
    email = raw_input("Your email (for git commits): ")
    subprocess.call(['git', 'config', '--global', 'user.name', '%s'%name])
    subprocess.call(['git', 'config', '--global', 'user.email', '%s'%email])
    return name

def configure_trac(username, HOME):
    subprocess.call(['git', 'config', '--global', 'trac.username', '%s'%username])
    save_password = raw_input("Do you want to save your trac password? [Y/n]: ")
    if save_password and save_password[0].lower() == 'n':
        with open(opj(HOME, '.trac'), 'w') as F:
            F.write('echo -n "Please enter your trac password: "\nread -s TRAC_PASSWORD\necho\nexport TRAC_PASSWORD')
        print "Your configuration has been stored in ~/user/{0}/.gitconfig and ~/user/{0}/.trac".format(username)
    else:
        while True:
            password = getpass.getpass("Your trac password: ")
            password2 = getpass.getpass("Enter your password again: ")
            if password == password2: break
            print "Passwords did not match"
        subprocess.call(['git', 'config', '--global', 'trac.password', '%s'%password])
        print "Your configuration has been stored in ~/user/{0}/.gitconfig".format(username)

def configure_ssh(username, HOME, interactive=True):
    ssh_folder = opj(HOME,'.ssh')
    if not ope(ssh_folder):
        os.mkdir(ssh_folder)
    ssh_id = opj(ssh_folder,'id_rsa')
    if not ope(ssh_id):
        #subprocess.call(['ssh-keygen', '-q', '-N', '""', '-C', '%s@sd%s'%(username,SDNUM), '-f', ssh_id])
        subprocess.call('ssh-keygen -q -N "" -C %s@sd%s -f %s'%(username, SDNUM, ssh_id), shell=True)
    if interactive:
        print "Please log into trac and copy the following ssh key to"
        print "https://trac.sagemath.org/prefs/sshkeys (MAKE SURE TO DELETE NEWLINES)\n"
        with open(opj(ssh_folder,'id_rsa.pub')) as F:
            pubkey = ""
            for line in F:
                pubkey += line
        print pubkey + "\n"
        print """If you want to be able to ssh into the project from your laptop, you must add a line to

    '{0}/authorized_keys'

of the following form:

    command=".init_user {1}" YOUR-SSH-PUBLIC_KEY

where YOUR-SSH-PUBLIC_KEY is the one from your laptop, not the one shown above.
You can use ".init_user -q {1}" if you don't want the startup message.
""".format(MAIN, username)

def configure_term(username):
    with open(opj(MAIN, 'Terms', '{0}.term'.format(username)), 'w') as F:
        F.write('%08x-%04x-4%03x-8%03x-%012x' % (random.randrange(16**8),random.randrange(16**4),random.randrange(16**3),random.randrange(16**3),random.randrange(16**12)))
    with open(opj(MAIN, 'Terms', '.{0}.term.init'.format(username)), 'w') as F:
        F.write('exec .init_user %s'%username)

def configure_bashrc(username, HOME, interactive=True):
    if interactive:
        editor = raw_input("What editor would you like to use for git commits (e.g. emacs, vim or nano)? ")
        if editor:
            with open(opj(HOME, '.bashrc'),'a') as F:
                F.write('\nexport EDITOR="%s"'%editor)
    with open(opj(HOME, '.bash_aliases'),'a') as F:
        F.write('\nalias sage=%s'%(opj(MAIN,'Src','sage-%s'%username,'sage')))

def configure_jupyter(username, name):
    kernel_loc = opj(MAIN, '.local', 'share', 'jupyter', 'kernels', 'sage%s'%username)
    if not ope(kernel_loc):
        os.makedirs(kernel_loc)
    with open(opj(kernel_loc, 'kernel.json'), 'w') as F:
        F.write("""{
 "display_name": "%s's SageMath",
 "argv": ["%s", "--python", "-m", "sage.repl.ipython_kernel","--matplotlib=inline", "-f", "{connection_file}"]
}"""%(name, opj(MAIN, 'Src', 'sage-%s'%username, 'sage')))

def init_user():
    print "This script will set up your user for the Sage Days {0} project (sd{0})\n\nWe need you to answer a few questions.".format(SDNUM)
    username = raw_input("Your trac username: ")
    HOME = create_homedir(username)
    name = configure_git()
    configure_trac(username, HOME)
    configure_ssh(username, HOME)
    configure_term(username)
    configure_bashrc(username, HOME)
    #configure_jupyter(username, name)
    print "\nSetup complete!\nNext steps:\n  * copy your ssh key (above) to trac\n  * add your laptop's key to authorized_keys\n  * start using your own terminal"

parser = argparse.ArgumentParser(description="Setup user")
parser.add_argument('userfile', help='file giving user data (one line per user, comma separated fields): trac username, full name, e-mail, optional trac password', nargs='?')
args = parser.parse_args()
if args.userfile is None:
    init_user()
else:
    if not ope(args.userfile):
        print "%s does not exist"%args.userfile
        sys.exit(1)
    with open(args.userfile) as F:
        lines = [[c.strip() for c in x.split(',')] for x in F.readlines()]
    if not all(len(L) in [3,4] for L in lines):
        print "All lines must have three or four entries (comma separated)"
        sys.exit(1)
    if any(' ' in L[0] for L in lines):
        print "Trac usernames may not have spaces"
        sys.exit(1)
    for L in lines:
        if len(L) == 3:
            username, name, email = L
            password = None
        else:
            username, name, email, password = L
        if ope(opj(MAIN, "user", username)):
            continue
        HOME = create_homedir(username)
        subprocess.call(['git', 'config', '--global', 'trac.username', '%s'%username])
        subprocess.call(['git', 'config', '--global', 'user.name', '%s'%name])
        subprocess.call(['git', 'config', '--global', 'user.email', '%s'%email])
        if password is None:
            with open(opj(HOME, '.trac'), 'w') as F:
                F.write('echo -n "Please enter your trac password: "\nread -s TRAC_PASSWORD\necho\nexport TRAC_PASSWORD')
        else:
            subprocess.call(['git', 'config', '--global', 'trac.password', '%s'%password])
        configure_ssh(username, HOME, interactive=False)
        configure_term(username)
        configure_bashrc(username, HOME, interactive=False)
        #configure_jupyter(username, name)
    print "Setup complete!"
